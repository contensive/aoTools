<?xml version="1.0"?>
<doc>
<assembly>
<name>
DesignBlockBase
</name>
</assembly>
<members>
<member name="T:Contensive.DesignBlockBase.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:Contensive.DesignBlockBase.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Contensive.DesignBlockBase.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="M:Contensive.DesignBlockBase.Controllers.DesignBlockController.addDesignBlockEditWrapper(Contensive.BaseClasses.CPBaseClass,System.String,Contensive.DesignBlockBase.Models.Db.SettingsBaseModel,System.String)">
 <summary>
 Wrap content in the standard Design Block edit wrapper
 </summary>
 <param name="cp"></param>
 <param name="innerHtml"></param>
 <param name="settings"></param>
 <param name="contentName"></param>
 <returns></returns>
</member>
<member name="M:Contensive.DesignBlockBase.Controllers.DesignBlockController.getSettingsGuid(Contensive.BaseClasses.CPBaseClass,System.String,System.String@)">
 <summary>
 return the instanceId for a design block. It should be an document argument set when the addon is dropped on the page.
 If the addon is created with a json string it should be included as an argument
 If it is not included, the page id is used to make a string
 If no instanceId can be created a blank is returned and should NOT be used.
 If returnHtmlMessage is non-blank, add it to the html
 </summary>
 <param name="cp"></param>
 <param name="designBlockName">A name of the design block. This must be unqiue for each type of design block (i.e. text, tile, etc)</param>
 <param name="returnHtmlMessage"></param>
 <returns>If blank is returned, </returns>
</member>
<member name="M:Contensive.DesignBlockBase.Controllers.DesignBlockController.getHttpStatus401NotAuthenticated(Contensive.BaseClasses.CPBaseClass)">
 <summary>
 Addon return for not authenticated
 </summary>
 <param name="cp"></param>
</member>
<member name="M:Contensive.DesignBlockBase.Controllers.DesignBlockController.getHttpStatus403NotAuthorized(Contensive.BaseClasses.CPBaseClass)">
 <summary>
 Addon return for not authorized
 </summary>
 <param name="cp"></param>
</member>
<member name="M:Contensive.DesignBlockBase.Controllers.DesignBlockController.getHttpStatus500InternalServerError(Contensive.BaseClasses.CPBaseClass)">
 <summary>
 Addon return for server error
 </summary>
 <param name="cp"></param>
</member>
<member name="P:Contensive.DesignBlockBase.Models.Db.DesignBlockThemeModel.tableMetadata">
 <summary>
table definition
</summary>
</member>
<member name="T:Contensive.DesignBlockBase.Models.Db.SettingsBaseModel">
 <summary>
 Inherit this model in Db models used as design block settings.
 This model includes the required fields for the Design Block pattern. 
 The settings record is the Db record that represents the instance of the design block in the one position.
 </summary>
</member>
<member name="M:Contensive.DesignBlockBase.Models.View.DesignBlockViewBaseModel.create``1(Contensive.BaseClasses.CPBaseClass,Contensive.DesignBlockBase.Models.Db.SettingsBaseModel)">
 <summary>
 Populate the view model from the entity model
 </summary>
 <param name="cp"></param>
 <param name="settings"></param>
 <returns></returns>
</member>
<member name="M:Contensive.DesignBlockBase.Models.View.DesignBlockViewBaseModel.encodeStyleHeight(System.String)">
 <summary>
 convert string into a style "height: {styleHeight};", if value is numeric it adds "px"
 </summary>
 <param name="styleheight"></param>
 <returns></returns>
</member>
<member name="M:Contensive.DesignBlockBase.Models.View.DesignBlockViewBaseModel.encodeStyleBackgroundImage(Contensive.BaseClasses.CPBaseClass,System.String)">
 <summary>
 convert string into a style "background-image: url(backgroundImage)
 </summary>
 <param name="backgroundImage"></param>
 <returns></returns>
</member>
</members>
</doc>
