<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DesignBlockBase</name>
    </assembly>
    <members>
        <member name="T:Contensive.DesignBlockBase.Constants">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.guidLayoutEditDataModelModal">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.nameLayoutEditDataModelModal">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.pathFilenameLayoutEditDataModelModal">
            <summary/>
        </member>
        <member name="T:Contensive.DesignBlockBase.Constants.AspectRatioEnum">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.AspectRatioEnum.Ratio_As_Is">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.AspectRatioEnum.Ratio_1_1">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.AspectRatioEnum.Ratio_3_2">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.AspectRatioEnum.Ratio_4_3">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.AspectRatioEnum.Ratio_16_9">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.AspectRatioEnum.Ratio_2_1">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.AspectRatioEnum.Ratio_3_1">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.AspectRatioEnum.Ratio_4_1">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.AspectRatioEnum.Ratio_5_1">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.AspectRatioEnum.Ratio_1_2">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.AspectRatioEnum.Ratio_1_3">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.AspectRatioEnum.Ratio_1_4">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.AspectRatioEnum.Ratio_1_5">
            <summary/>
        </member>
        <member name="T:Contensive.DesignBlockBase.Constants.HttpErrorEnum">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.HttpErrorEnum.badRequest">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.HttpErrorEnum.unauthorized">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.HttpErrorEnum.paymentRequired">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.HttpErrorEnum.forbidden">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.HttpErrorEnum.notFound">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.HttpErrorEnum.methodNotAllowed">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.HttpErrorEnum.notAcceptable">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.HttpErrorEnum.proxyAuthenticationRequired">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.HttpErrorEnum.requestTimeout">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.HttpErrorEnum.conflict">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.HttpErrorEnum.gone">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.HttpErrorEnum.lengthRequired">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.HttpErrorEnum.preconditionFailed">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.HttpErrorEnum.payloadTooLarge">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.HttpErrorEnum.urlTooLong">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.HttpErrorEnum.unsupportedMediaType">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.HttpErrorEnum.rangeNotSatisfiable">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.HttpErrorEnum.expectationFailed">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.HttpErrorEnum.teapot">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.HttpErrorEnum.methodFailure">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.HttpErrorEnum.enhanceYourCalm">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.HttpErrorEnum.misdirectedRequest">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.HttpErrorEnum.unprocessableEntity">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.HttpErrorEnum.locked">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.HttpErrorEnum.failedDependency">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.HttpErrorEnum.upgradeRequired">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.HttpErrorEnum.preconditionRequired">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.HttpErrorEnum.tooManyRequests">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.HttpErrorEnum.requestHeaderFieldsTooLarge">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.HttpErrorEnum.loginTimeout">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.HttpErrorEnum.noResponse">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.HttpErrorEnum.retryWith">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.HttpErrorEnum.redirect">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.HttpErrorEnum.unavailableForLegalReasons">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.HttpErrorEnum.sslCertificateError">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.HttpErrorEnum.sslCertificateRequired">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.HttpErrorEnum.httpRequestSentToSecurePort">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.HttpErrorEnum.invalidToken">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.HttpErrorEnum.clientClosedRequest">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.HttpErrorEnum.tokenRequired">
            <summary/>
        </member>
        <member name="F:Contensive.DesignBlockBase.Constants.HttpErrorEnum.internalServerError">
            <summary/>
        </member>
        <member name="T:Contensive.DesignBlockBase.Controllers.DesignBlockController">
            <summary>
            controller methods common to design block features
            </summary>
        </member>
        <member name="M:Contensive.DesignBlockBase.Controllers.DesignBlockController.addDesignBlockEditWrapper(Contensive.BaseClasses.CPBaseClass,System.String,Contensive.DesignBlockBase.Models.Db.SettingsBaseModel,System.String)">
            <summary>
            Wrap content in the standard Design Block edit wrapper 
            </summary>
            <param name="cp"></param>
            <param name="innerHtml"></param>
            <param name="settings"></param>
            <param name="contentName"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.DesignBlockBase.Controllers.DesignBlockController.addDesignBlockEditWrapper(Contensive.BaseClasses.CPBaseClass,System.String,Contensive.DesignBlockBase.Models.Db.SettingsBaseModel,System.String,System.String)">
            <summary>
            Wrap content in the standard Design Block edit wrapper with a custom edit button
            </summary>
            <param name="cp"></param>
            <param name="innerHtml"></param>
            <param name="settings"></param>
            <param name="contentName"></param>
            <param name="customEditCaption"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.DesignBlockBase.Controllers.DesignBlockController.addDesignBlockEditWrapper(Contensive.BaseClasses.CPBaseClass,System.String,Contensive.DesignBlockBase.Models.Db.SettingsBaseModel,System.String,System.Object)">
            <summary>
            Wrap content in the standard Design Block edit wrapper. Include the debug view model button.
            </summary>
            <param name="cp"></param>
            <param name="innerHtml"></param>
            <param name="settings"></param>
            <param name="contentName"></param>
            <param name="viewModel"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.DesignBlockBase.Controllers.DesignBlockController.addDesignBlockEditWrapper(Contensive.BaseClasses.CPBaseClass,System.String,Contensive.Models.Db.DbBaseModel,System.String,System.Object,System.String)">
            <summary>
            Wrap content in the standard Design Block edit wrapper. Include the debug view model button and a custom edit button.
            </summary>
            <param name="cp"></param>
            <param name="innerHtml"></param>
            <param name="settings"></param>
            <param name="contentName"></param>
            <param name="viewModel"></param>
            <param name="customEditCaption"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.DesignBlockBase.Controllers.DesignBlockController.getSettingsGuid(Contensive.BaseClasses.CPBaseClass,System.String,System.String@)">
            <summary>
            return the instanceId for a design block. It should be an document argument set when the addon is dropped on the page.
            If the addon is created with a json string it should be included as an argument
            If it is not included, the page id is used to make a string
            If no instanceId can be created a blank is returned and should NOT be used.
            If returnHtmlMessage is non-blank, add it to the html
            </summary>
            <param name="cp"></param>
            <param name="WidgetName">A name of the design block. This must be unqiue for each type of design block (i.e. text, tile, etc)</param>
            <param name="returnHtmlMessage"></param>
            <returns>If blank is returned, </returns>
        </member>
        <member name="M:Contensive.DesignBlockBase.Controllers.DesignBlockController.getHttpStatus401NotAuthenticated(Contensive.BaseClasses.CPBaseClass)">
            <summary>
            Addon return for not authenticated
            </summary>
            <param name="cp"></param>
        </member>
        <member name="M:Contensive.DesignBlockBase.Controllers.DesignBlockController.getHttpStatus403NotAuthorized(Contensive.BaseClasses.CPBaseClass)">
            <summary>
            Addon return for not authorized
            </summary>
            <param name="cp"></param>
        </member>
        <member name="M:Contensive.DesignBlockBase.Controllers.DesignBlockController.getHttpStatus500InternalServerError(Contensive.BaseClasses.CPBaseClass)">
            <summary>
            Addon return for server error
            </summary>
            <param name="cp"></param>
        </member>
        <member name="M:Contensive.DesignBlockBase.Controllers.DesignBlockController.renderWidget``2(Contensive.BaseClasses.CPBaseClass,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates widget html
            opens a record in the Settings table from the guid in request (cp.doc.getText) "instanceId". 
            creates an instance of the renderDataModel from the SettingsDbModel instance. 
            loads the layout record
            renders the widget with mustache from the layout and the renderDataModel
            </summary>
            <typeparam name="SettingsDbModel">The widget db model. One record per widget instance placed on a page.This is the record users will edit to customize the widget</typeparam>
            <typeparam name="RenderDataModel">The model used to populate the layout with mustache. It includes a property for each mustache property in the layout, and a create() method that converts the settings record to a render data model</typeparam>
            <param name="CP"></param>
            <param name="widgetName">The name of the widget as it appears publically. Fo example, 'Accordian Widget'</param>
            <param name="layoutGuid">If settingsDbModel has no layoutid, Guid of the layout record used to render the widget. If it is not found a new layout record is create with this guid, and the name and filename provided,</param>
            <param name="layoutName">If settingsDbModel has no layoutid, and If the layout record is missing, a new record is created with this name.</param>
            <param name="layoutPathFilename">If settingsDbModel has no layoutid,  and If the layout record is missing, a new record is created from this layout file.</param>
            <param name="layoutBS5PathFilename">If settingsDbModel has no layoutid,  and If the layout record is missing, a new record is created with bootstrap-5 from this layout file.</param>
            <returns></returns>
        </member>
        <member name="T:Contensive.DesignBlockBase.Controllers.DesignBlockController.RenderWidgetRequest">
            <summary>
            request arguments for renderWidget
            </summary>
        </member>
        <member name="P:Contensive.DesignBlockBase.Controllers.DesignBlockController.RenderWidgetRequest.widgetName">
            <summary>
            Name of the widget
            </summary>
        </member>
        <member name="P:Contensive.DesignBlockBase.Controllers.DesignBlockController.RenderWidgetRequest.guidLayout">
            <summary>
            the guid of the layout record
            </summary>
        </member>
        <member name="P:Contensive.DesignBlockBase.Controllers.DesignBlockController.RenderWidgetRequest.nameLayout">
            <summary>
            the name of the layout record, used if a new record is created
            </summary>
        </member>
        <member name="P:Contensive.DesignBlockBase.Controllers.DesignBlockController.RenderWidgetRequest.pathFilenameLayout">
            <summary>
            the cdn path to the defult layout file, used if a new record is created
            </summary>
        </member>
        <member name="P:Contensive.DesignBlockBase.Controllers.DesignBlockController.RenderWidgetRequest.pathFilenameLayoutBS5">
            <summary>
            the cdn path to the bootstrap 5 layout file, used if a new record is created
            </summary>
        </member>
        <member name="T:Contensive.DesignBlockBase.Controllers.ImageController">
            <summary>
            image methods related to design blocks
            </summary>
        </member>
        <member name="M:Contensive.DesignBlockBase.Controllers.ImageController.getImageHeight(Contensive.BaseClasses.CPBaseClass,System.Int32,System.Int32)">
            <summary>
            returns the height of the image hole (size of the image in the layout) based on the image width and the aspect ratio
            </summary>
            <param name="cp"></param>
            <param name="holeWidthPx"></param>
            <param name="imageAspectRatioId"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.DesignBlockBase.Controllers.ImageController.resizeImage(Contensive.BaseClasses.CPBaseClass,System.String,System.String@,System.Int32,System.Int32)">
            <summary>
            resize an image to best-fit a the size of a hole in a layout
            </summary>
            <param name="cp"></param>
            <param name="srcPathFilename">The PathFilename in the cdnFile filesystem</param>
            <param name="srcAltSizeCommaList">A comma list of the filename plus all the resized formats. Pass in blank the first time. It if changes, save it back to the source.</param>
            <param name="holeWidthPx">The width of the final image in pixels</param>
            <param name="imageAspectRatioId">The id of the ratio. See ImageController.getAspectRatio </param>
            <returns></returns>
        </member>
        <member name="M:Contensive.DesignBlockBase.Controllers.ImageController.getAspectRatioStyle(System.Int32)">
            <summary>
            return the style for each aspectRatioId. Ratio is definied as width:height. if empty, it is not managed.
            </summary>
            <param name="imageAspectRatioId"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.DesignBlockBase.Controllers.ImageController.getAspectRatio(System.Int32)">
            <summary>
            return the aspect ratio for each ratio, definied as width / height. As-Is is returned as -1, all other are alway>0
            </summary>
            <param name="imageAspectRatioId"></param>
            <returns></returns>
        </member>
        <member name="T:Contensive.DesignBlockBase.Controllers.LayoutController">
            <summary>
            layout controller
            </summary>
        </member>
        <member name="T:Contensive.DesignBlockBase.Models.Db.DesignBlockThemeModel">
            <summary>
            Themes are style sheet selectors that are added to the wrapper around design block widgets
            </summary>
        </member>
        <member name="P:Contensive.DesignBlockBase.Models.Db.DesignBlockThemeModel.tableMetadata">
            <summary>
            table definition
            </summary>
        </member>
        <member name="T:Contensive.DesignBlockBase.Models.Db.SettingsBaseModel">
            <summary>
            Inherit this model in Db models used as design block settings.
            This model includes the required fields for the Design Block pattern. 
            The settings record is the Db record that represents the instance of the design block in the one position.
            </summary>
        </member>
        <member name="P:Contensive.DesignBlockBase.Models.Db.SettingsBaseModel.backgroundImageFilename">
            <summary>
            background image for the entire widget
            </summary>
        </member>
        <member name="P:Contensive.DesignBlockBase.Models.Db.SettingsBaseModel.themeStyleId">
            <summary>
            select a theme (css selector) to be used for the widget
            </summary>
        </member>
        <member name="P:Contensive.DesignBlockBase.Models.Db.SettingsBaseModel.padTop">
            <summary>
            add padding on the designated side
            </summary>
        </member>
        <member name="P:Contensive.DesignBlockBase.Models.Db.SettingsBaseModel.padBottom">
            <summary>
            add padding on the designated side
            </summary>
        </member>
        <member name="P:Contensive.DesignBlockBase.Models.Db.SettingsBaseModel.padRight">
            <summary>
            add padding on the designated side
            </summary>
        </member>
        <member name="P:Contensive.DesignBlockBase.Models.Db.SettingsBaseModel.padLeft">
            <summary>
            add padding on the designated side
            </summary>
        </member>
        <member name="P:Contensive.DesignBlockBase.Models.Db.SettingsBaseModel.styleheight">
            <summary>
            if a hardcoded height is needed
            </summary>
        </member>
        <member name="P:Contensive.DesignBlockBase.Models.Db.SettingsBaseModel.asFullBleed">
            <summary>
            if true, a bs container is added to the widget, else the widget is treated as full-bleed
            </summary>
        </member>
        <member name="M:Contensive.DesignBlockBase.Models.Db.SettingsBaseModel.createOrAddSettings(Contensive.BaseClasses.CPBaseClass,System.String,System.String)">
            <summary>
            must overload
            </summary>
            <param name="cp"></param>
            <param name="settingsGuid"></param>
            <param name="recordNameSuffix"></param>
            <returns></returns>
        </member>
        <member name="T:Contensive.DesignBlockBase.Models.View.DesignBlockViewBaseModel">
            <summary>
            All design block widgets must inherit this class. It includes properties that are common to all widgets, and the create base method to created them.
            </summary>
        </member>
        <member name="P:Contensive.DesignBlockBase.Models.View.DesignBlockViewBaseModel.styleBackgroundImage">
            <summary>
            background style defined by common elements of design block widgets
            </summary>
            <returns></returns>
        </member>
        <member name="P:Contensive.DesignBlockBase.Models.View.DesignBlockViewBaseModel.styleheight">
            <summary>
            hieght style defined by common elements of design block widgets
            </summary>
        </member>
        <member name="P:Contensive.DesignBlockBase.Models.View.DesignBlockViewBaseModel.contentContainerClass">
            <summary>
            style defined by common elements of design block widgets
            </summary>
        </member>
        <member name="P:Contensive.DesignBlockBase.Models.View.DesignBlockViewBaseModel.outerContainerClass">
            <summary>
            style defined by common elements of design block widgets
            </summary>
        </member>
        <member name="M:Contensive.DesignBlockBase.Models.View.DesignBlockViewBaseModel.create``1(Contensive.BaseClasses.CPBaseClass,Contensive.DesignBlockBase.Models.Db.SettingsBaseModel)">
            <summary>
            Populate the view model from the entity model
            </summary>
            <param name="cp"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.DesignBlockBase.Models.View.DesignBlockViewBaseModel.encodeStyleHeight(System.String)">
            <summary>
            convert string into a style "height: {styleHeight};", if value is numeric it adds "px"
            </summary>
            <param name="styleheight"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.DesignBlockBase.Models.View.DesignBlockViewBaseModel.encodeStyleBackgroundImage(Contensive.BaseClasses.CPBaseClass,System.String)">
            <summary>
            convert string into a style "background-image: url(backgroundImage)
            </summary>
            <param name="backgroundImagePathFilename"></param>
            <param name="cp"></param>
            <returns></returns>
        </member>
        <member name="T:Contensive.DesignBlockBase.My.Resources.Resources">
            <summary>
            A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Contensive.DesignBlockBase.My.Resources.Resources.ResourceManager">
            <summary>
            Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Contensive.DesignBlockBase.My.Resources.Resources.Culture">
            <summary>
            Overrides the current thread's CurrentUICulture property for all
            resource lookups using this strongly typed resource class.
            </summary>
        </member>
    </members>
</doc>
